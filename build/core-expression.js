import"./lib/jsep.js";const jsep=window.jsep;delete window.jsep;var binops={"||":(e,r)=>e||r,"&&":(e,r)=>e&&r,"|":(e,r)=>e|r,"^":(e,r)=>e^r,"&":(e,r)=>e&r,"==":(e,r)=>e==r,"!=":(e,r)=>e!=r,"===":(e,r)=>e===r,"!==":(e,r)=>e!==r,"<":(e,r)=>e<r,">":(e,r)=>e>r,"<=":(e,r)=>e<=r,">=":(e,r)=>e>=r,"<<":(e,r)=>e<<r,">>":(e,r)=>e>>r,">>>":(e,r)=>e>>>r,"+":(e,r)=>e+r,"-":(e,r)=>e-r,"*":(e,r)=>e*r,"/":(e,r)=>e/r,"%":(e,r)=>e%r},unops={"-":function(e){return-e},"+":function(e){return e},"~":function(e){return~e},"!":function(e){return!e}};function evaluateArray(e,r){return e.map(function(e){return evaluate(e,r)})}function evaluateMember(e,r){var s=evaluate(e.object,r);return e.computed?[s,s[evaluate(e.property,r)]]:[s,s[e.property.name]]}function evaluate(e,r){switch(e.type){case"ArrayExpression":return evaluateArray(e.elements,r);case"BinaryExpression":return binops[e.operator](evaluate(e.left,r),evaluate(e.right,r));case"CallExpression":var s,t,a;if("MemberExpression"===e.callee.type?(s=(a=evaluateMember(e.callee,r))[0],t=a[1]):t=evaluate(e.callee,r),"function"!=typeof t)return;return t.apply(s,evaluateArray(e.arguments,r));case"ConditionalExpression":return evaluate(e.test,r)?evaluate(e.consequent,r):evaluate(e.alternate,r);case"Identifier":return r[e.name];case"Literal":return e.value;case"LogicalExpression":return binops[e.operator](evaluate(e.left,r),evaluate(e.right,r));case"MemberExpression":return evaluateMember(e,r)[1];case"ThisExpression":return r;case"UnaryExpression":return unops[e.operator](evaluate(e.argument,r));default:return}}function compile(e){return evaluate.bind(null,jsep(e))}const Expression={parse:jsep,eval:evaluate,compile:compile,test:{outerscope:"window",getObservablePaths:function(e){console.log("Parser.getPaths",e);var r=Expression.parse(e);if(r){console.log("Parser.getPaths",r);var s=new Array;return this.recurseObservablePaths(r,s),s}return!1},recurseObservablePaths:function(e,r,s){if(!e||!r)return!1;if("Identifier"==e.type)console.log("Parser.recurseObservablePaths","adding identifier "+e.name),r.push({object:this.outerscope,path:e.name});else if("MemberExpression"==e.type)"Identifier"==e.property.type||"Literal"==e.property.type?(s="Identifier"==e.property.type?s?"."+e.property.name+s:"."+e.property.name:s?"["+e.property.raw+"]"+s:"["+e.property.raw+"]","Identifier"==e.object.type?(console.log("Parser.recurseObservablePaths","adding path "+e.object.name+s),0===s.indexOf(".")?r.push({object:e.object.name,path:s.substring(1)}):r.push({object:this.outerscope,path:e.object.name+s})):"MemberExpression"==e.object.type?(console.log("Parser.recurseObservablePaths","recursing member expression .."),this.recurseObservablePaths(e.object,r,s)):this.recurseObservablePaths(e.object,r)):"Identifier"==e.object.type?(console.log("Parser.recurseObservablePaths","adding identifier "+e.object.name),r.push({object:this.outerscope,path:e.object.name}),this.recurseObservablePaths(e.property)):(console.log("Parser.recurseObservablePaths","recursing member expression .."),this.recurseObservablePaths(e.object,r),this.recurseObservablePaths(e.property,r));else if("CallExpression"==e.type)this.recurseObservablePaths(e.arguments,r);else if("AssignmentExpression"==e.type)this.recurseObservablePaths(e.right,r);else for(var t=Object.getOwnPropertyNames(e),a=0;a<t.length;a++){var n=t[a];if("object"==typeof e[n])if(Array.isArray(e[n]))for(var o=0;o<e[n].length;o++)console.log("Parser.recurseObservablePaths","recursing "+n+":"+o),this.recurseObservablePaths(e[n][o],r);else console.log("Parser.recurseObservablePaths","recursing "+n),this.recurseObservablePaths(e[n],r);else console.log("Parser.recurseObservablePaths","ignoring "+n)}}}};window.Expression=Expression;export{Expression};