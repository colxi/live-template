import{Bindings}from"./core-bindings.js";import{Directive,Directives}from"./core-directives.js";import{Placeholder}from"./core-placeholder.js";import{Subscribe}from"./core-subscribe.js";import{Util}from"./core-util.js";import{Keypath}from"./core-keypath.js";const Bind={element:function(e){if(!(e instanceof HTMLElement||e instanceof Text))return _DEBUG_.darkyellow("Bind.element() : Only HTMLElements and TextNodes are allowed"),!1;if(e.nodeType===Node.ELEMENT_NODE&&("SCRIPT"===e.tagName||"STYLE"===e.tagName))return _DEBUG_.darkyellow("Bind.Element(): Script and Style Elements can't be binded."),!1;const n=new Set;let t=!1;if(_DEBUG_.yellow("Bind.Element(): Scanning Element :",e),e.nodeType===Node.ELEMENT_NODE&&e.hasAttributes()){const i=e.attributes.length;for(let r=0;r<i;r++){const i=e.attributes[r];if(Directive.isDirectiveName(i.name)){Directive.exist(i.name)?(_DEBUG_.darkyellow("Bind.Element(): Directive Attribute found in element :",i.name,"=",'"'+i.value+'"'),_bind_Directive(e,i.name,i.value.trim()),!t&&Directive.isBlocking(i.name)&&(t=!0)):_DEBUG_.darkyellow("Bind.Element(): Unregistered Directive attribute found("+i.name+"). Ignored.");continue}const o=Placeholder.getFromString(i.value);o.length&&_DEBUG_.darkyellow("Bind.Element(): Placeholder(s) found in attribute :",i.name,"=",'"'+i.value+'"'),o.forEach(t=>{n.add(t),_bind_Attribute(e,i.name,i.value),_bind_Placeholder(e,t)})}}if(t||Util.getElementTextNodes(e).forEach(e=>{const t=Placeholder.getFromString(e.nodeValue);t.length&&_DEBUG_.darkyellow("Bind.Element(): Placeholder(s) found in textNode :",t),t.forEach(t=>{n.add(t),_bind_TextNode(e,e.nodeValue),_bind_Placeholder(e,t)})}),n.size?_DEBUG_.darkyellow("Bind.Element(): Interpolating Placeholder(s)"):_DEBUG_.darkyellow("Bind.Element(): Nothing to Bind in element."),n.forEach(e=>Subscribe.model(e)),!t&&e.nodeType===Node.ELEMENT_NODE){const n=Array.from(e.children);n.length&&_DEBUG_.darkyellow("Bind.Element(): Element has child Nodes..."),n.forEach(e=>Bind.element(e))}return Debug.loadTab(),!0}},_bind_TextNode=function(e,n){return Bindings.elements.set(e,n),!0},_bind_Attribute=function(e,n,t){if(Bindings.elements.has(e)){const i=Bindings.elements.get(e);i[n]=t,Bindings.elements.set(e,i)}else Bindings.elements.set(e,{[n]:t});return!0},_bind_Placeholder=function(e,n){return _DEBUG_.green("Binding PLACEHOLDER to element :",n,e),Bindings.placeholders.hasOwnProperty(n)||(Bindings.placeholders[n]=[]),Bindings.placeholders[n].push(e),!0},_bind_Directive=function(e,n,t){_DEBUG_.green("Binding DIRECTIVE to element :",n,t,e);const i=n.split("-"),r=i[1],o=i.slice(1);if(Util.isStringQuoted(t))_DEBUG_.green("_bind_Directive() : Directive value is a constant. Skipping Binding."),Directives[r].hasOwnProperty("subscribe")&&Directives[r].subscribe(e,void 0,o,Util.unquoteString(t));else{const i=t;if(_bind_Placeholder(e,i),_bind_Attribute(e,n,i),Directives[r].hasOwnProperty("bind")&&Directives[r].bind(e,i,o),Directives[r].hasOwnProperty("subscribe"))if(Keypath.exist(i)){const n=Keypath.resolveContext(i);Directives[r].subscribe(e,i,o,n.context[n.property])}else _DEBUG_.green("_bind_Directive() : Model or model property does mot exist. ("+i+")"),Directives[r].subscribe(e,i,o,"")}return!0};Bind.event=function(e,n,t){let i={};if(Bindings.events.has(e)){i=Bindings.events.get(e);for(let e in i)if(i.hasOwnProperty(e)&&e===n)throw new Error("Element has already another event of the same type binded! Unexpected!")}return i[n]=t,Bindings.events.set(e,i),e.addEventListener(n,t),!0};export{Bind};