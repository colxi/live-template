import{Bindings}from"./core-bindings.js";import{Directive}from"./core-directive.js";import{Directives}from"./core-directives.js";import{Placeholder}from"./core-placeholder.js";import{Subscribe}from"./core-subscribe.js";import{Util}from"./core-util.js";import{Keypath}from"./core-keypath.js";const Bind={element:function(e){if(!(e instanceof HTMLElement||e instanceof Text))return _DEBUG_.binding.dark("Bind.element() : Only HTMLElements and TextNodes are allowed"),!1;if(e.nodeType===Node.ELEMENT_NODE&&("SCRIPT"===e.tagName||"STYLE"===e.tagName))return _DEBUG_.binding.dark("Bind.Element(): Script and Style Elements can't be binded."),!1;const n=new Set;let i=!1;if(_DEBUG_.binding("Bind.Element(): Scanning Element :",{element:e}),e.nodeType===Node.ELEMENT_NODE&&e.hasAttributes()){const t=e.attributes.length;for(let r=0;r<t;r++){const t=e.attributes[r];if(Directive.isDirectiveName(t.name)){Directive.exist(t.name)?(_bind_Directive(e,t.name,t.value.trim()),!i&&Directive.isBlocking(t.name)&&(i=!0)):_DEBUG_.binding.dark("Bind.Element(): Unregistered Directive attribute found("+t.name+"). Ignored.");continue}const d=Placeholder.getFromString(t.value);d.length&&_DEBUG_.binding.dark("Bind.Element(): Placeholder(s) found in attribute :",t.name,"=",'"'+t.value+'"'),d.forEach(i=>{n.add(i),_bind_Attribute(e,t.name,t.value),_bind_Placeholder(e,i)})}}if(i||Util.getElementTextNodes(e).forEach(e=>{const i=Placeholder.getFromString(e.nodeValue);i.length&&_DEBUG_.binding.dark("Bind.Element(): Placeholder(s) found in textNode :",i),i.forEach(i=>{n.add(i),_bind_TextNode(e,e.nodeValue),_bind_Placeholder(e,i)})}),n.size&&_DEBUG_.binding.dark("Bind.Element(): Interpolating Placeholder(s)"),n.forEach(e=>Subscribe.model(e)),!i&&e.nodeType===Node.ELEMENT_NODE){const n=Array.from(e.children);n.length&&_DEBUG_.binding.dark("Bind.Element(): Element has child Nodes..."),n.forEach(e=>Bind.element(e))}return Debug.loadTab(),!0}},_bind_TextNode=function(e,n){return Bindings.elements.set(e,n),!0},_bind_Attribute=function(e,n,i){if(Bindings.elements.has(e)){const t=Bindings.elements.get(e);t[n]=i,Bindings.elements.set(e,t)}else Bindings.elements.set(e,{[n]:i});return!0},_bind_Placeholder=function(e,n){return _DEBUG_.binding.darker("Binding PLACEHOLDER to element :",n+" ->",e.tagName||"TEXT_NODE"),Bindings.placeholders.hasOwnProperty(n)||(Bindings.placeholders[n]=[]),Bindings.placeholders[n].push(e),!0},_bind_Directive=function(e,n,i){_DEBUG_.binding.darker("Binding DIRECTIVE to element :",n+'="'+i+'" ->',e.tagName);const t=Directive.nameUnpack(n);if(Util.isStringQuoted(i))_DEBUG_.binding.darker("_bind_Directive() : Directive value is a constant. Skipping Binding."),Directives[t.name].hasOwnProperty("subscribe")&&Directives[t.name].subscribe(e,void 0,t.arguments,Util.unquoteString(i));else{const r=i;if(_bind_Placeholder(e,r),_bind_Attribute(e,n,r),Directives[t.name].hasOwnProperty("bind")&&Directives[t.name].bind(e,r,t.arguments),Directives[t.name].hasOwnProperty("subscribe"))if(Keypath.exist(r)){const n=Keypath.resolveContext(r);Directives[t.name].subscribe(e,r,t.arguments,n.context[n.property])}else _DEBUG_.binding.darker("_bind_Directive() : Model or model property does mot exist. ("+r+")"),Directives[t.name].subscribe(e,r,t.arguments,"")}return!0};Bind.event=function(e,n,i){let t={};if(Bindings.events.has(e)){t=Bindings.events.get(e);for(let e in t)if(t.hasOwnProperty(e)&&e===n)throw new Error("Element has already another event of the same type binded! Unexpected!")}return t[n]=i,Bindings.events.set(e,t),e.addEventListener(n,i),!0};export{Bind};