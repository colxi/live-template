import{Debug}from"./debugger/debugger.js";import{Bindings}from"./core-bindings.js";import{Directive}from"./core-directive.js";import{Directives}from"./core-directives.js";import{Placeholder}from"./core-placeholder.js";import{Util}from"./core-util.js";const Unbind={element:function(e){if(!(e instanceof HTMLElement||e instanceof Text))return _DEBUG_.red("Unbind.element() : Only HTMLElements and TextNodes are allowed",e),!1;if(e.nodeType===Node.ELEMENT_NODE&&("SCRIPT"===e.tagName||"STYLE"===e.tagName))return _DEBUG_.red("Unbind.Element(): Script and Style Elements are ignored."),!1;_DEBUG_.red("Unbind.element() : Unbinding ELEMENT :",{element:e});const n=Array.from(e.children||[]);if(e.nodeType===Node.ELEMENT_NODE&&e.hasAttributes()){const n=e.attributes.length;for(let t=0;t<n;t++){const n=e.attributes[t];if(!Directive.isDirectiveName(n.name)||!Directive.exist(n.name))continue;if(Util.isStringQuoted(n.value))continue;const i=Directive.nameUnpack(n.name);if("function"==typeof Directives[i.name].unbind&&Directives[i.name].unbind(e,n.value,i.arguments),Bindings.events.has(e)){const n=Bindings.events.get(e);Object.keys(n).forEach(n=>Unbind.event(e,n))}}}let t=[];return e.nodeType===Node.ELEMENT_NODE?(t=Util.getElementTextNodes(e)).push(e):t.push(e),t.forEach(e=>{Placeholder.getFromTemplate(e).forEach(n=>{if(Bindings.placeholders.hasOwnProperty(n)){const t=Bindings.placeholders[n].indexOf(e);-1!==t&&Bindings.placeholders[n].splice(t,1),Bindings.placeholders[n].length||delete Bindings.placeholders[n]}}),Bindings.elements.delete(e)}),n.forEach(Unbind.element),Debug.loadTab(),!0},event:function(e,n=""){if(Bindings.events.has(e)){let t=Bindings.events.get(e);for(let i in t)t.hasOwnProperty(i)&&(i!==n&&""!==n||(e.removeEventListener(i,t[i]),delete t[i]));Object.keys(t).length?Bindings.events.set(e,t):Bindings.events.delete(e)}return!0}};export{Unbind};