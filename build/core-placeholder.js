import{Keypath}from"./core-keypath.js";import{Config}from"./core-config.js";import{Bindings}from"./core-bindings.js";import{Util}from"./core-util.js";import{Directive}from"./core-directive.js";const Placeholder={removeDelimiters:function(e=""){return(e=(e=e.trim()).slice(Config.placeholderDelimitiers[0].length,0-Config.placeholderDelimitiers[1].length)).trim()},getFromString:function(e=""){let t=e.match(Config._getPlaceholdersExp)||[];return t=(t=(t=Array.from(new Set(t))).map(e=>Placeholder.removeDelimiters(e))).filter(e=>!!e.length)},getFromTemplate:function(e){let t=[];if(Bindings.elements.has(e))if(e.nodeType===Node.TEXT_NODE)t=Placeholder.getFromString(Bindings.elements.get(e));else{let r=Bindings.elements.get(e);for(let e in r){if(!r.hasOwnProperty(e))continue;let i=Placeholder.getFromString(r[e]);if(Directive.isDirectiveName(e)&&!i.lenght){let t=r[e].trim();if(Util.isStringQuoted(t))continue;i=[t]}t=t.concat(i)}}return t},populateString:function(e=""){return Placeholder.getFromString(e).forEach(t=>{let r;try{let e=Keypath.resolveContext(t);r=e.context[e.property]}catch(e){r=""}let i=new RegExp(Config._replacePlaceholdersExpString.replace("__PLACEHOLDER__",t),"g");e=e.replace(i,r)}),e}};export{Placeholder};